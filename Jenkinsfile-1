pipeline {
  agent any

  tools {
    maven 'Maven3'
    jdk 'JDK17'
  }

  environment {
    DOCKERHUB_CREDENTIALS = credentials('docker-hub-credentials')
    KUBECONFIG = credentials('kubeconfig')
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/ines-jendoubi/Backend-CI-CD.git'
      }
    }

    // REMOVED the separate Clean stage - package will handle cleaning if needed

    stage('Build and Package') {
      steps {
        // This does clean + compile + package in one step
        sh 'mvn -B clean package -DskipTests'
      }
    }

    // ========== CD STAGES ==========
    stage('Build Docker Image') {
      steps {
        script {
          sh 'docker build -t inessjend/tpproject-app:latest .'
        }
      }
    }
    
    stage('Push to Docker Hub') {
      steps {
        script {
          sh "docker login -u ${DOCKERHUB_CREDENTIALS_USR} -p ${DOCKERHUB_CREDENTIALS_PSW}"
          sh 'docker push inessjend/tpproject-app:latest'
        }
      }
    }
    
    stage('Deploy to Kubernetes') {
      steps {
        script {
          sh 'kubectl apply -f k8s/mysql-secret.yaml'
          sh 'kubectl apply -f k8s/mysql-deployment.yaml'
          sh 'kubectl wait --for=condition=ready pod -l app=mysql --timeout=300s'
          sh 'kubectl apply -f k8s/app-deployment.yaml'
          sh 'kubectl apply -f k8s/app-service.yaml'
          sh 'kubectl wait --for=condition=ready pod -l app=tpproject-app --timeout=300s'
          sh 'minikube service tpproject-app --url'
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ CI/CD Pipeline termin√© avec succ√®s !"
      echo "üöÄ Application d√©ploy√©e sur Kubernetes!"
      sh 'kubectl get all'
    }
    failure {
      echo "‚ùå Pipeline √©chou√©. V√©rifie les logs Jenkins."
    }
    always {
      sh 'docker logout'
    }
  }
}
